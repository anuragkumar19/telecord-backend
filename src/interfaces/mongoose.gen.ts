/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of MessageReactionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MessageDocument.toObject()`.
 * ```
 * const messageObject = message.toObject();
 * ```
 */
export type MessageReaction = {
  user: User["_id"] | User;
  emoji: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of MessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MessageDocument.toObject()`. To avoid conflicts with model names, use the type alias `MessageObject`.
 * ```
 * const messageObject = message.toObject();
 * ```
 */
export type Message = {
  thread: Thread["_id"] | Thread;
  user: User["_id"] | User;
  text?: string;
  reactions: MessageReaction[];
  replyTo?: Message["_id"] | Message;
  replyToStatus?: Status["_id"] | Status;
  media?: string;
  mediaType?: "image" | "video" | "audio" | "any";
  seenBy: (User["_id"] | User)[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of MessageDocument (type alias of `Message`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Message } from "../models"
 * import { MessageObject } from "../interfaces/mongoose.gen.ts"
 *
 * const messageObject: MessageObject = message.toObject();
 * ```
 */
export type MessageObject = Message;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type MessageQuery = mongoose.Query<
  any,
  MessageDocument,
  MessageQueries
> &
  MessageQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `MessageSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type MessageQueries = {};

export type MessageMethods = {};

export type MessageStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Message = mongoose.model<MessageDocument, MessageModel>("Message", MessageSchema);
 * ```
 */
export type MessageModel = mongoose.Model<MessageDocument, MessageQueries> &
  MessageStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Message schema instances:
 * ```
 * const MessageSchema: MessageSchema = new mongoose.Schema({ ... })
 * ```
 */
export type MessageSchema = mongoose.Schema<
  MessageDocument,
  MessageModel,
  MessageMethods,
  MessageQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `MessageDocument["reactions"]` element.
 */
export type MessageReactionDocument = mongoose.Types.Subdocument & {
  user: UserDocument["_id"] | UserDocument;
  emoji: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Message = mongoose.model<MessageDocument, MessageModel>("Message", MessageSchema);
 * ```
 */
export type MessageDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  MessageQueries
> &
  MessageMethods & {
    thread: ThreadDocument["_id"] | ThreadDocument;
    user: UserDocument["_id"] | UserDocument;
    text?: string;
    reactions: mongoose.Types.DocumentArray<MessageReactionDocument>;
    replyTo?: MessageDocument["_id"] | MessageDocument;
    replyToStatus?: StatusDocument["_id"] | StatusDocument;
    media?: string;
    mediaType?: "image" | "video" | "audio" | "any";
    seenBy: mongoose.Types.Array<UserDocument["_id"] | UserDocument>;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of StatusDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StatusDocument.toObject()`. To avoid conflicts with model names, use the type alias `StatusObject`.
 * ```
 * const statusObject = status.toObject();
 * ```
 */
export type Status = {
  user: User["_id"] | User;
  media: string;
  mediaType?: "image" | "video";
  caption?: string;
  seenBy: (User["_id"] | User)[];
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of StatusDocument (type alias of `Status`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Status } from "../models"
 * import { StatusObject } from "../interfaces/mongoose.gen.ts"
 *
 * const statusObject: StatusObject = status.toObject();
 * ```
 */
export type StatusObject = Status;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type StatusQuery = mongoose.Query<any, StatusDocument, StatusQueries> &
  StatusQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `StatusSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type StatusQueries = {};

export type StatusMethods = {};

export type StatusStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Status = mongoose.model<StatusDocument, StatusModel>("Status", StatusSchema);
 * ```
 */
export type StatusModel = mongoose.Model<StatusDocument, StatusQueries> &
  StatusStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Status schema instances:
 * ```
 * const StatusSchema: StatusSchema = new mongoose.Schema({ ... })
 * ```
 */
export type StatusSchema = mongoose.Schema<
  StatusDocument,
  StatusModel,
  StatusMethods,
  StatusQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Status = mongoose.model<StatusDocument, StatusModel>("Status", StatusSchema);
 * ```
 */
export type StatusDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  StatusQueries
> &
  StatusMethods & {
    user: UserDocument["_id"] | UserDocument;
    media: string;
    mediaType?: "image" | "video";
    caption?: string;
    seenBy: mongoose.Types.Array<UserDocument["_id"] | UserDocument>;
    _id: mongoose.Types.ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
  };

/**
 * Lean version of ThreadUserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ThreadDocument.toObject()`.
 * ```
 * const threadObject = thread.toObject();
 * ```
 */
export type ThreadUser = {
  user: User["_id"] | User;
  isInvite?: boolean;
  isAdmin?: boolean;
  isNotificationMuted?: boolean;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of ThreadDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ThreadDocument.toObject()`. To avoid conflicts with model names, use the type alias `ThreadObject`.
 * ```
 * const threadObject = thread.toObject();
 * ```
 */
export type Thread = {
  isPrivate?: boolean;
  title?: string;
  users: ThreadUser[];
  lastMessaged?: Date;
  identifier?: string;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of ThreadDocument (type alias of `Thread`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Thread } from "../models"
 * import { ThreadObject } from "../interfaces/mongoose.gen.ts"
 *
 * const threadObject: ThreadObject = thread.toObject();
 * ```
 */
export type ThreadObject = Thread;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ThreadQuery = mongoose.Query<any, ThreadDocument, ThreadQueries> &
  ThreadQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `ThreadSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ThreadQueries = {};

export type ThreadMethods = {};

export type ThreadStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Thread = mongoose.model<ThreadDocument, ThreadModel>("Thread", ThreadSchema);
 * ```
 */
export type ThreadModel = mongoose.Model<ThreadDocument, ThreadQueries> &
  ThreadStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Thread schema instances:
 * ```
 * const ThreadSchema: ThreadSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ThreadSchema = mongoose.Schema<
  ThreadDocument,
  ThreadModel,
  ThreadMethods,
  ThreadQueries
>;

/**
 * Mongoose Subdocument type
 *
 * Type of `ThreadDocument["users"]` element.
 */
export type ThreadUserDocument = mongoose.Types.Subdocument & {
  user: UserDocument["_id"] | UserDocument;
  isInvite?: boolean;
  isAdmin?: boolean;
  isNotificationMuted?: boolean;
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Thread = mongoose.model<ThreadDocument, ThreadModel>("Thread", ThreadSchema);
 * ```
 */
export type ThreadDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ThreadQueries
> &
  ThreadMethods & {
    isPrivate?: boolean;
    title?: string;
    users: mongoose.Types.DocumentArray<ThreadUserDocument>;
    lastMessaged?: Date;
    identifier?: string;
    _id: mongoose.Types.ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
  };

/**
 * Lean version of UserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export type User = {
  name: string;
  email: string;
  username: string;
  avatar?: string;
  bio?: string;
  password: string;
  isEmailVerified?: boolean;
  otp?: string;
  otpExpiry?: number;
  secondaryEmail?: string;
  secondaryEmailOtp?: string;
  secondaryEmailOtpExpiry?: number;
  isSecondaryEmailVerified?: boolean;
  lastSeen: Date;
  sentFriendRequests: (User["_id"] | User)[];
  friendRequests: (User["_id"] | User)[];
  friends: (User["_id"] | User)[];
  whoCanSeeBio?: "everyone" | "friends" | "nobody";
  whoCanSeeActiveStatus?: "everyone" | "friends" | "nobody";
  whoCanSeeAvatar?: "everyone" | "friends" | "nobody";
  whoCanSeeStatus?: "everyone" | "friends" | "nobody";
  whoCanSendYouMessage?: "everyone" | "friends";
  whoCanSeeLastSeen?: "everyone" | "friends" | "nobody";
  blocked: (User["_id"] | User)[];
  _id: mongoose.Types.ObjectId;
  createdAt?: Date;
  updatedAt?: Date;
};

/**
 * Lean version of UserDocument (type alias of `User`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { User } from "../models"
 * import { UserObject } from "../interfaces/mongoose.gen.ts"
 *
 * const userObject: UserObject = user.toObject();
 * ```
 */
export type UserObject = User;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type UserQuery = mongoose.Query<any, UserDocument, UserQueries> &
  UserQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `UserSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type UserQueries = {};

export type UserMethods = {
  comparePassword: (this: UserDocument, ...args: any[]) => any;
  generateAuthTokens: (this: UserDocument, ...args: any[]) => any;
  generateAccessToken: (this: UserDocument, ...args: any[]) => any;
  me: (this: UserDocument, ...args: any[]) => any;
};

export type UserStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserModel = mongoose.Model<UserDocument, UserQueries> & UserStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new User schema instances:
 * ```
 * const UserSchema: UserSchema = new mongoose.Schema({ ... })
 * ```
 */
export type UserSchema = mongoose.Schema<
  UserDocument,
  UserModel,
  UserMethods,
  UserQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const User = mongoose.model<UserDocument, UserModel>("User", UserSchema);
 * ```
 */
export type UserDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  UserQueries
> &
  UserMethods & {
    name: string;
    email: string;
    username: string;
    avatar?: string;
    bio?: string;
    password: string;
    isEmailVerified?: boolean;
    otp?: string;
    otpExpiry?: number;
    secondaryEmail?: string;
    secondaryEmailOtp?: string;
    secondaryEmailOtpExpiry?: number;
    isSecondaryEmailVerified?: boolean;
    lastSeen: Date;
    sentFriendRequests: mongoose.Types.Array<
      UserDocument["_id"] | UserDocument
    >;
    friendRequests: mongoose.Types.Array<UserDocument["_id"] | UserDocument>;
    friends: mongoose.Types.Array<UserDocument["_id"] | UserDocument>;
    whoCanSeeBio?: "everyone" | "friends" | "nobody";
    whoCanSeeActiveStatus?: "everyone" | "friends" | "nobody";
    whoCanSeeAvatar?: "everyone" | "friends" | "nobody";
    whoCanSeeStatus?: "everyone" | "friends" | "nobody";
    whoCanSendYouMessage?: "everyone" | "friends";
    whoCanSeeLastSeen?: "everyone" | "friends" | "nobody";
    blocked: mongoose.Types.Array<UserDocument["_id"] | UserDocument>;
    _id: mongoose.Types.ObjectId;
    createdAt?: Date;
    updatedAt?: Date;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
